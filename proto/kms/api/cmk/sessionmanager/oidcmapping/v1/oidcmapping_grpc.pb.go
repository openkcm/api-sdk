// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kms/api/cmk/sessionmanager/oidcmapping/v1/oidcmapping.proto

package oidcmappingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OIDCMapping_ApplyOIDCMapping_FullMethodName  = "/kms.api.cmk.sessionmanager.oidcmapping.v1.OIDCMapping/ApplyOIDCMapping"
	OIDCMapping_RemoveOIDCMapping_FullMethodName = "/kms.api.cmk.sessionmanager.oidcmapping.v1.OIDCMapping/RemoveOIDCMapping"
)

// OIDCMappingClient is the client API for OIDCMapping service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OIDCMappingClient interface {
	ApplyOIDCMapping(ctx context.Context, in *ApplyOIDCMappingRequest, opts ...grpc.CallOption) (*ApplyOIDCMappingResponse, error)
	RemoveOIDCMapping(ctx context.Context, in *RemoveOIDCMappingRequest, opts ...grpc.CallOption) (*RemoveOIDCMappingResponse, error)
}

type oIDCMappingClient struct {
	cc grpc.ClientConnInterface
}

func NewOIDCMappingClient(cc grpc.ClientConnInterface) OIDCMappingClient {
	return &oIDCMappingClient{cc}
}

func (c *oIDCMappingClient) ApplyOIDCMapping(ctx context.Context, in *ApplyOIDCMappingRequest, opts ...grpc.CallOption) (*ApplyOIDCMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyOIDCMappingResponse)
	err := c.cc.Invoke(ctx, OIDCMapping_ApplyOIDCMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oIDCMappingClient) RemoveOIDCMapping(ctx context.Context, in *RemoveOIDCMappingRequest, opts ...grpc.CallOption) (*RemoveOIDCMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveOIDCMappingResponse)
	err := c.cc.Invoke(ctx, OIDCMapping_RemoveOIDCMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OIDCMappingServer is the server API for OIDCMapping service.
// All implementations must embed UnimplementedOIDCMappingServer
// for forward compatibility.
type OIDCMappingServer interface {
	ApplyOIDCMapping(context.Context, *ApplyOIDCMappingRequest) (*ApplyOIDCMappingResponse, error)
	RemoveOIDCMapping(context.Context, *RemoveOIDCMappingRequest) (*RemoveOIDCMappingResponse, error)
	mustEmbedUnimplementedOIDCMappingServer()
}

// UnimplementedOIDCMappingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOIDCMappingServer struct{}

func (UnimplementedOIDCMappingServer) ApplyOIDCMapping(context.Context, *ApplyOIDCMappingRequest) (*ApplyOIDCMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyOIDCMapping not implemented")
}
func (UnimplementedOIDCMappingServer) RemoveOIDCMapping(context.Context, *RemoveOIDCMappingRequest) (*RemoveOIDCMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOIDCMapping not implemented")
}
func (UnimplementedOIDCMappingServer) mustEmbedUnimplementedOIDCMappingServer() {}
func (UnimplementedOIDCMappingServer) testEmbeddedByValue()                     {}

// UnsafeOIDCMappingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OIDCMappingServer will
// result in compilation errors.
type UnsafeOIDCMappingServer interface {
	mustEmbedUnimplementedOIDCMappingServer()
}

func RegisterOIDCMappingServer(s grpc.ServiceRegistrar, srv OIDCMappingServer) {
	// If the following call pancis, it indicates UnimplementedOIDCMappingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OIDCMapping_ServiceDesc, srv)
}

func _OIDCMapping_ApplyOIDCMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyOIDCMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OIDCMappingServer).ApplyOIDCMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OIDCMapping_ApplyOIDCMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OIDCMappingServer).ApplyOIDCMapping(ctx, req.(*ApplyOIDCMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OIDCMapping_RemoveOIDCMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOIDCMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OIDCMappingServer).RemoveOIDCMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OIDCMapping_RemoveOIDCMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OIDCMappingServer).RemoveOIDCMapping(ctx, req.(*RemoveOIDCMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OIDCMapping_ServiceDesc is the grpc.ServiceDesc for OIDCMapping service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OIDCMapping_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kms.api.cmk.sessionmanager.oidcmapping.v1.OIDCMapping",
	HandlerType: (*OIDCMappingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyOIDCMapping",
			Handler:    _OIDCMapping_ApplyOIDCMapping_Handler,
		},
		{
			MethodName: "RemoveOIDCMapping",
			Handler:    _OIDCMapping_RemoveOIDCMapping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kms/api/cmk/sessionmanager/oidcmapping/v1/oidcmapping.proto",
}
