// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kms/api/cmk/registry/auth/v1/auth.proto

package authv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Auth with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Auth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthMultiError, or nil if none found.
func (m *Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for TenantId

	// no validation rules for Type

	// no validation rules for Properties

	// no validation rules for Status

	// no validation rules for ErrorMessage

	// no validation rules for UpdatedAt

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return AuthMultiError(errors)
	}

	return nil
}

// AuthMultiError is an error wrapping multiple validation errors returned by
// Auth.ValidateAll() if the designated constraints aren't met.
type AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthMultiError) AllErrors() []error { return m }

// AuthValidationError is the validation error returned by Auth.Validate if the
// designated constraints aren't met.
type AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthValidationError) ErrorName() string { return "AuthValidationError" }

// Error satisfies the builtin error interface
func (e AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthValidationError{}

// Validate checks the field values on ApplyAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplyAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyAuthRequestMultiError, or nil if none found.
func (m *ApplyAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for TenantId

	// no validation rules for Type

	// no validation rules for Properties

	if len(errors) > 0 {
		return ApplyAuthRequestMultiError(errors)
	}

	return nil
}

// ApplyAuthRequestMultiError is an error wrapping multiple validation errors
// returned by ApplyAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type ApplyAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyAuthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyAuthRequestMultiError) AllErrors() []error { return m }

// ApplyAuthRequestValidationError is the validation error returned by
// ApplyAuthRequest.Validate if the designated constraints aren't met.
type ApplyAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyAuthRequestValidationError) ErrorName() string { return "ApplyAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e ApplyAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyAuthRequestValidationError{}

// Validate checks the field values on ApplyAuthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplyAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyAuthResponseMultiError, or nil if none found.
func (m *ApplyAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ApplyAuthResponseMultiError(errors)
	}

	return nil
}

// ApplyAuthResponseMultiError is an error wrapping multiple validation errors
// returned by ApplyAuthResponse.ValidateAll() if the designated constraints
// aren't met.
type ApplyAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyAuthResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyAuthResponseMultiError) AllErrors() []error { return m }

// ApplyAuthResponseValidationError is the validation error returned by
// ApplyAuthResponse.Validate if the designated constraints aren't met.
type ApplyAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyAuthResponseValidationError) ErrorName() string {
	return "ApplyAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyAuthResponseValidationError{}

// Validate checks the field values on GetAuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAuthRequestMultiError,
// or nil if none found.
func (m *GetAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	if len(errors) > 0 {
		return GetAuthRequestMultiError(errors)
	}

	return nil
}

// GetAuthRequestMultiError is an error wrapping multiple validation errors
// returned by GetAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthRequestMultiError) AllErrors() []error { return m }

// GetAuthRequestValidationError is the validation error returned by
// GetAuthRequest.Validate if the designated constraints aren't met.
type GetAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthRequestValidationError) ErrorName() string { return "GetAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthRequestValidationError{}

// Validate checks the field values on GetAuthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthResponseMultiError, or nil if none found.
func (m *GetAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuthResponseValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuthResponseValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuthResponseValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAuthResponseMultiError(errors)
	}

	return nil
}

// GetAuthResponseMultiError is an error wrapping multiple validation errors
// returned by GetAuthResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthResponseMultiError) AllErrors() []error { return m }

// GetAuthResponseValidationError is the validation error returned by
// GetAuthResponse.Validate if the designated constraints aren't met.
type GetAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthResponseValidationError) ErrorName() string { return "GetAuthResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthResponseValidationError{}

// Validate checks the field values on ListAuthsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAuthsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthsRequestMultiError, or nil if none found.
func (m *ListAuthsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for Limit

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListAuthsRequestMultiError(errors)
	}

	return nil
}

// ListAuthsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAuthsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAuthsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthsRequestMultiError) AllErrors() []error { return m }

// ListAuthsRequestValidationError is the validation error returned by
// ListAuthsRequest.Validate if the designated constraints aren't met.
type ListAuthsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthsRequestValidationError) ErrorName() string { return "ListAuthsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAuthsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthsRequestValidationError{}

// Validate checks the field values on ListAuthsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAuthsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthsResponseMultiError, or nil if none found.
func (m *ListAuthsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAuth() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuthsResponseValidationError{
						field:  fmt.Sprintf("Auth[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuthsResponseValidationError{
						field:  fmt.Sprintf("Auth[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuthsResponseValidationError{
					field:  fmt.Sprintf("Auth[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListAuthsResponseMultiError(errors)
	}

	return nil
}

// ListAuthsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAuthsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAuthsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthsResponseMultiError) AllErrors() []error { return m }

// ListAuthsResponseValidationError is the validation error returned by
// ListAuthsResponse.Validate if the designated constraints aren't met.
type ListAuthsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthsResponseValidationError) ErrorName() string {
	return "ListAuthsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuthsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthsResponseValidationError{}

// Validate checks the field values on RemoveAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveAuthRequestMultiError, or nil if none found.
func (m *RemoveAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	if len(errors) > 0 {
		return RemoveAuthRequestMultiError(errors)
	}

	return nil
}

// RemoveAuthRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveAuthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveAuthRequestMultiError) AllErrors() []error { return m }

// RemoveAuthRequestValidationError is the validation error returned by
// RemoveAuthRequest.Validate if the designated constraints aren't met.
type RemoveAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAuthRequestValidationError) ErrorName() string {
	return "RemoveAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAuthRequestValidationError{}

// Validate checks the field values on RemoveAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveAuthResponseMultiError, or nil if none found.
func (m *RemoveAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveAuthResponseMultiError(errors)
	}

	return nil
}

// RemoveAuthResponseMultiError is an error wrapping multiple validation errors
// returned by RemoveAuthResponse.ValidateAll() if the designated constraints
// aren't met.
type RemoveAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveAuthResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveAuthResponseMultiError) AllErrors() []error { return m }

// RemoveAuthResponseValidationError is the validation error returned by
// RemoveAuthResponse.Validate if the designated constraints aren't met.
type RemoveAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAuthResponseValidationError) ErrorName() string {
	return "RemoveAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAuthResponseValidationError{}
