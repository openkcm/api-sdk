// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kms/api/cmk/registry/system/v1/system.proto

package systemv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_RegisterSystem_FullMethodName          = "/kms.api.cmk.registry.system.v1.Service/RegisterSystem"
	Service_ListSystems_FullMethodName             = "/kms.api.cmk.registry.system.v1.Service/ListSystems"
	Service_DeleteSystem_FullMethodName            = "/kms.api.cmk.registry.system.v1.Service/DeleteSystem"
	Service_UpdateSystemL1KeyClaim_FullMethodName  = "/kms.api.cmk.registry.system.v1.Service/UpdateSystemL1KeyClaim"
	Service_UnlinkSystemsFromTenant_FullMethodName = "/kms.api.cmk.registry.system.v1.Service/UnlinkSystemsFromTenant"
	Service_LinkSystemsToTenant_FullMethodName     = "/kms.api.cmk.registry.system.v1.Service/LinkSystemsToTenant"
	Service_UpdateSystemStatus_FullMethodName      = "/kms.api.cmk.registry.system.v1.Service/UpdateSystemStatus"
	Service_SetSystemLabels_FullMethodName         = "/kms.api.cmk.registry.system.v1.Service/SetSystemLabels"
	Service_RemoveSystemLabels_FullMethodName      = "/kms.api.cmk.registry.system.v1.Service/RemoveSystemLabels"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	RegisterSystem(ctx context.Context, in *RegisterSystemRequest, opts ...grpc.CallOption) (*RegisterSystemResponse, error)
	ListSystems(ctx context.Context, in *ListSystemsRequest, opts ...grpc.CallOption) (*ListSystemsResponse, error)
	DeleteSystem(ctx context.Context, in *DeleteSystemRequest, opts ...grpc.CallOption) (*DeleteSystemResponse, error)
	UpdateSystemL1KeyClaim(ctx context.Context, in *UpdateSystemL1KeyClaimRequest, opts ...grpc.CallOption) (*UpdateSystemL1KeyClaimResponse, error)
	UnlinkSystemsFromTenant(ctx context.Context, in *UnlinkSystemsFromTenantRequest, opts ...grpc.CallOption) (*UnlinkSystemsFromTenantResponse, error)
	LinkSystemsToTenant(ctx context.Context, in *LinkSystemsToTenantRequest, opts ...grpc.CallOption) (*LinkSystemsToTenantResponse, error)
	UpdateSystemStatus(ctx context.Context, in *UpdateSystemStatusRequest, opts ...grpc.CallOption) (*UpdateSystemStatusResponse, error)
	SetSystemLabels(ctx context.Context, in *SetSystemLabelsRequest, opts ...grpc.CallOption) (*SetSystemLabelsResponse, error)
	RemoveSystemLabels(ctx context.Context, in *RemoveSystemLabelsRequest, opts ...grpc.CallOption) (*RemoveSystemLabelsResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) RegisterSystem(ctx context.Context, in *RegisterSystemRequest, opts ...grpc.CallOption) (*RegisterSystemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterSystemResponse)
	err := c.cc.Invoke(ctx, Service_RegisterSystem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListSystems(ctx context.Context, in *ListSystemsRequest, opts ...grpc.CallOption) (*ListSystemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemsResponse)
	err := c.cc.Invoke(ctx, Service_ListSystems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteSystem(ctx context.Context, in *DeleteSystemRequest, opts ...grpc.CallOption) (*DeleteSystemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSystemResponse)
	err := c.cc.Invoke(ctx, Service_DeleteSystem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateSystemL1KeyClaim(ctx context.Context, in *UpdateSystemL1KeyClaimRequest, opts ...grpc.CallOption) (*UpdateSystemL1KeyClaimResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSystemL1KeyClaimResponse)
	err := c.cc.Invoke(ctx, Service_UpdateSystemL1KeyClaim_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UnlinkSystemsFromTenant(ctx context.Context, in *UnlinkSystemsFromTenantRequest, opts ...grpc.CallOption) (*UnlinkSystemsFromTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlinkSystemsFromTenantResponse)
	err := c.cc.Invoke(ctx, Service_UnlinkSystemsFromTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LinkSystemsToTenant(ctx context.Context, in *LinkSystemsToTenantRequest, opts ...grpc.CallOption) (*LinkSystemsToTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkSystemsToTenantResponse)
	err := c.cc.Invoke(ctx, Service_LinkSystemsToTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateSystemStatus(ctx context.Context, in *UpdateSystemStatusRequest, opts ...grpc.CallOption) (*UpdateSystemStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSystemStatusResponse)
	err := c.cc.Invoke(ctx, Service_UpdateSystemStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SetSystemLabels(ctx context.Context, in *SetSystemLabelsRequest, opts ...grpc.CallOption) (*SetSystemLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSystemLabelsResponse)
	err := c.cc.Invoke(ctx, Service_SetSystemLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RemoveSystemLabels(ctx context.Context, in *RemoveSystemLabelsRequest, opts ...grpc.CallOption) (*RemoveSystemLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSystemLabelsResponse)
	err := c.cc.Invoke(ctx, Service_RemoveSystemLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	RegisterSystem(context.Context, *RegisterSystemRequest) (*RegisterSystemResponse, error)
	ListSystems(context.Context, *ListSystemsRequest) (*ListSystemsResponse, error)
	DeleteSystem(context.Context, *DeleteSystemRequest) (*DeleteSystemResponse, error)
	UpdateSystemL1KeyClaim(context.Context, *UpdateSystemL1KeyClaimRequest) (*UpdateSystemL1KeyClaimResponse, error)
	UnlinkSystemsFromTenant(context.Context, *UnlinkSystemsFromTenantRequest) (*UnlinkSystemsFromTenantResponse, error)
	LinkSystemsToTenant(context.Context, *LinkSystemsToTenantRequest) (*LinkSystemsToTenantResponse, error)
	UpdateSystemStatus(context.Context, *UpdateSystemStatusRequest) (*UpdateSystemStatusResponse, error)
	SetSystemLabels(context.Context, *SetSystemLabelsRequest) (*SetSystemLabelsResponse, error)
	RemoveSystemLabels(context.Context, *RemoveSystemLabelsRequest) (*RemoveSystemLabelsResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) RegisterSystem(context.Context, *RegisterSystemRequest) (*RegisterSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSystem not implemented")
}
func (UnimplementedServiceServer) ListSystems(context.Context, *ListSystemsRequest) (*ListSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystems not implemented")
}
func (UnimplementedServiceServer) DeleteSystem(context.Context, *DeleteSystemRequest) (*DeleteSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystem not implemented")
}
func (UnimplementedServiceServer) UpdateSystemL1KeyClaim(context.Context, *UpdateSystemL1KeyClaimRequest) (*UpdateSystemL1KeyClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemL1KeyClaim not implemented")
}
func (UnimplementedServiceServer) UnlinkSystemsFromTenant(context.Context, *UnlinkSystemsFromTenantRequest) (*UnlinkSystemsFromTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkSystemsFromTenant not implemented")
}
func (UnimplementedServiceServer) LinkSystemsToTenant(context.Context, *LinkSystemsToTenantRequest) (*LinkSystemsToTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkSystemsToTenant not implemented")
}
func (UnimplementedServiceServer) UpdateSystemStatus(context.Context, *UpdateSystemStatusRequest) (*UpdateSystemStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemStatus not implemented")
}
func (UnimplementedServiceServer) SetSystemLabels(context.Context, *SetSystemLabelsRequest) (*SetSystemLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSystemLabels not implemented")
}
func (UnimplementedServiceServer) RemoveSystemLabels(context.Context, *RemoveSystemLabelsRequest) (*RemoveSystemLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSystemLabels not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_RegisterSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RegisterSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RegisterSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RegisterSystem(ctx, req.(*RegisterSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ListSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListSystems(ctx, req.(*ListSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteSystem(ctx, req.(*DeleteSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateSystemL1KeyClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemL1KeyClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateSystemL1KeyClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateSystemL1KeyClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateSystemL1KeyClaim(ctx, req.(*UpdateSystemL1KeyClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UnlinkSystemsFromTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkSystemsFromTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UnlinkSystemsFromTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UnlinkSystemsFromTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UnlinkSystemsFromTenant(ctx, req.(*UnlinkSystemsFromTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LinkSystemsToTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkSystemsToTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).LinkSystemsToTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_LinkSystemsToTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).LinkSystemsToTenant(ctx, req.(*LinkSystemsToTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateSystemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateSystemStatus(ctx, req.(*UpdateSystemStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SetSystemLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSystemLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SetSystemLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_SetSystemLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SetSystemLabels(ctx, req.(*SetSystemLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RemoveSystemLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSystemLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RemoveSystemLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RemoveSystemLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RemoveSystemLabels(ctx, req.(*RemoveSystemLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kms.api.cmk.registry.system.v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSystem",
			Handler:    _Service_RegisterSystem_Handler,
		},
		{
			MethodName: "ListSystems",
			Handler:    _Service_ListSystems_Handler,
		},
		{
			MethodName: "DeleteSystem",
			Handler:    _Service_DeleteSystem_Handler,
		},
		{
			MethodName: "UpdateSystemL1KeyClaim",
			Handler:    _Service_UpdateSystemL1KeyClaim_Handler,
		},
		{
			MethodName: "UnlinkSystemsFromTenant",
			Handler:    _Service_UnlinkSystemsFromTenant_Handler,
		},
		{
			MethodName: "LinkSystemsToTenant",
			Handler:    _Service_LinkSystemsToTenant_Handler,
		},
		{
			MethodName: "UpdateSystemStatus",
			Handler:    _Service_UpdateSystemStatus_Handler,
		},
		{
			MethodName: "SetSystemLabels",
			Handler:    _Service_SetSystemLabels_Handler,
		},
		{
			MethodName: "RemoveSystemLabels",
			Handler:    _Service_RemoveSystemLabels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kms/api/cmk/registry/system/v1/system.proto",
}
