// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kms/api/cmk/registry/system/v1/system.proto

package systemv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	typesv1 "github.com/openkcm/api-sdk/proto/kms/api/cmk/types/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = typesv1.Status(0)
)

// Validate checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *System) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SystemMultiError, or nil if none found.
func (m *System) ValidateAll() error {
	return m.validate(true)
}

func (m *System) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for TenantId

	// no validation rules for L2KeyId

	// no validation rules for HasL1KeyClaim

	// no validation rules for Region

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for UpdatedAt

	// no validation rules for CreatedAt

	// no validation rules for Labels

	if len(errors) > 0 {
		return SystemMultiError(errors)
	}

	return nil
}

// SystemMultiError is an error wrapping multiple validation errors returned by
// System.ValidateAll() if the designated constraints aren't met.
type SystemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemMultiError) AllErrors() []error { return m }

// SystemValidationError is the validation error returned by System.Validate if
// the designated constraints aren't met.
type SystemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemValidationError) ErrorName() string { return "SystemValidationError" }

// Error satisfies the builtin error interface
func (e SystemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemValidationError{}

// Validate checks the field values on RegisterSystemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterSystemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterSystemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterSystemRequestMultiError, or nil if none found.
func (m *RegisterSystemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterSystemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for TenantId

	// no validation rules for L2KeyId

	// no validation rules for HasL1KeyClaim

	// no validation rules for Region

	// no validation rules for Status

	// no validation rules for Type

	// no validation rules for Labels

	if len(errors) > 0 {
		return RegisterSystemRequestMultiError(errors)
	}

	return nil
}

// RegisterSystemRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterSystemRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterSystemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterSystemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterSystemRequestMultiError) AllErrors() []error { return m }

// RegisterSystemRequestValidationError is the validation error returned by
// RegisterSystemRequest.Validate if the designated constraints aren't met.
type RegisterSystemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterSystemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterSystemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterSystemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterSystemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterSystemRequestValidationError) ErrorName() string {
	return "RegisterSystemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterSystemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterSystemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterSystemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterSystemRequestValidationError{}

// Validate checks the field values on RegisterSystemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterSystemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterSystemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterSystemResponseMultiError, or nil if none found.
func (m *RegisterSystemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterSystemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RegisterSystemResponseMultiError(errors)
	}

	return nil
}

// RegisterSystemResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterSystemResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterSystemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterSystemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterSystemResponseMultiError) AllErrors() []error { return m }

// RegisterSystemResponseValidationError is the validation error returned by
// RegisterSystemResponse.Validate if the designated constraints aren't met.
type RegisterSystemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterSystemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterSystemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterSystemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterSystemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterSystemResponseValidationError) ErrorName() string {
	return "RegisterSystemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterSystemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterSystemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterSystemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterSystemResponseValidationError{}

// Validate checks the field values on ListSystemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSystemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSystemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSystemsRequestMultiError, or nil if none found.
func (m *ListSystemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSystemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Region

	// no validation rules for TenantId

	// no validation rules for Type

	// no validation rules for Limit

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSystemsRequestMultiError(errors)
	}

	return nil
}

// ListSystemsRequestMultiError is an error wrapping multiple validation errors
// returned by ListSystemsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSystemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSystemsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSystemsRequestMultiError) AllErrors() []error { return m }

// ListSystemsRequestValidationError is the validation error returned by
// ListSystemsRequest.Validate if the designated constraints aren't met.
type ListSystemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemsRequestValidationError) ErrorName() string {
	return "ListSystemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemsRequestValidationError{}

// Validate checks the field values on ListSystemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSystemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSystemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSystemsResponseMultiError, or nil if none found.
func (m *ListSystemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSystemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSystems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSystemsResponseValidationError{
						field:  fmt.Sprintf("Systems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSystemsResponseValidationError{
						field:  fmt.Sprintf("Systems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSystemsResponseValidationError{
					field:  fmt.Sprintf("Systems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListSystemsResponseMultiError(errors)
	}

	return nil
}

// ListSystemsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSystemsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSystemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSystemsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSystemsResponseMultiError) AllErrors() []error { return m }

// ListSystemsResponseValidationError is the validation error returned by
// ListSystemsResponse.Validate if the designated constraints aren't met.
type ListSystemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemsResponseValidationError) ErrorName() string {
	return "ListSystemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemsResponseValidationError{}

// Validate checks the field values on DeleteSystemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSystemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSystemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSystemRequestMultiError, or nil if none found.
func (m *DeleteSystemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSystemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Region

	if len(errors) > 0 {
		return DeleteSystemRequestMultiError(errors)
	}

	return nil
}

// DeleteSystemRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSystemRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSystemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSystemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSystemRequestMultiError) AllErrors() []error { return m }

// DeleteSystemRequestValidationError is the validation error returned by
// DeleteSystemRequest.Validate if the designated constraints aren't met.
type DeleteSystemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSystemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSystemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSystemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSystemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSystemRequestValidationError) ErrorName() string {
	return "DeleteSystemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSystemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSystemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSystemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSystemRequestValidationError{}

// Validate checks the field values on DeleteSystemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSystemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSystemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSystemResponseMultiError, or nil if none found.
func (m *DeleteSystemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSystemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteSystemResponseMultiError(errors)
	}

	return nil
}

// DeleteSystemResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSystemResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSystemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSystemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSystemResponseMultiError) AllErrors() []error { return m }

// DeleteSystemResponseValidationError is the validation error returned by
// DeleteSystemResponse.Validate if the designated constraints aren't met.
type DeleteSystemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSystemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSystemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSystemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSystemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSystemResponseValidationError) ErrorName() string {
	return "DeleteSystemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSystemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSystemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSystemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSystemResponseValidationError{}

// Validate checks the field values on UpdateSystemL1KeyClaimRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemL1KeyClaimRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSystemL1KeyClaimRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSystemL1KeyClaimRequestMultiError, or nil if none found.
func (m *UpdateSystemL1KeyClaimRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemL1KeyClaimRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Region

	// no validation rules for TenantId

	// no validation rules for L1KeyClaim

	if len(errors) > 0 {
		return UpdateSystemL1KeyClaimRequestMultiError(errors)
	}

	return nil
}

// UpdateSystemL1KeyClaimRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSystemL1KeyClaimRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateSystemL1KeyClaimRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemL1KeyClaimRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemL1KeyClaimRequestMultiError) AllErrors() []error { return m }

// UpdateSystemL1KeyClaimRequestValidationError is the validation error
// returned by UpdateSystemL1KeyClaimRequest.Validate if the designated
// constraints aren't met.
type UpdateSystemL1KeyClaimRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemL1KeyClaimRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemL1KeyClaimRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemL1KeyClaimRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemL1KeyClaimRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemL1KeyClaimRequestValidationError) ErrorName() string {
	return "UpdateSystemL1KeyClaimRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemL1KeyClaimRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemL1KeyClaimRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemL1KeyClaimRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemL1KeyClaimRequestValidationError{}

// Validate checks the field values on UpdateSystemL1KeyClaimResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemL1KeyClaimResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSystemL1KeyClaimResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSystemL1KeyClaimResponseMultiError, or nil if none found.
func (m *UpdateSystemL1KeyClaimResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemL1KeyClaimResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateSystemL1KeyClaimResponseMultiError(errors)
	}

	return nil
}

// UpdateSystemL1KeyClaimResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSystemL1KeyClaimResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateSystemL1KeyClaimResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemL1KeyClaimResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemL1KeyClaimResponseMultiError) AllErrors() []error { return m }

// UpdateSystemL1KeyClaimResponseValidationError is the validation error
// returned by UpdateSystemL1KeyClaimResponse.Validate if the designated
// constraints aren't met.
type UpdateSystemL1KeyClaimResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemL1KeyClaimResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemL1KeyClaimResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemL1KeyClaimResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemL1KeyClaimResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemL1KeyClaimResponseValidationError) ErrorName() string {
	return "UpdateSystemL1KeyClaimResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemL1KeyClaimResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemL1KeyClaimResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemL1KeyClaimResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemL1KeyClaimResponseValidationError{}

// Validate checks the field values on UnlinkSystemsFromTenantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlinkSystemsFromTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlinkSystemsFromTenantRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnlinkSystemsFromTenantRequestMultiError, or nil if none found.
func (m *UnlinkSystemsFromTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlinkSystemsFromTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSystemIdentifiers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnlinkSystemsFromTenantRequestValidationError{
						field:  fmt.Sprintf("SystemIdentifiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnlinkSystemsFromTenantRequestValidationError{
						field:  fmt.Sprintf("SystemIdentifiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnlinkSystemsFromTenantRequestValidationError{
					field:  fmt.Sprintf("SystemIdentifiers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnlinkSystemsFromTenantRequestMultiError(errors)
	}

	return nil
}

// UnlinkSystemsFromTenantRequestMultiError is an error wrapping multiple
// validation errors returned by UnlinkSystemsFromTenantRequest.ValidateAll()
// if the designated constraints aren't met.
type UnlinkSystemsFromTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlinkSystemsFromTenantRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlinkSystemsFromTenantRequestMultiError) AllErrors() []error { return m }

// UnlinkSystemsFromTenantRequestValidationError is the validation error
// returned by UnlinkSystemsFromTenantRequest.Validate if the designated
// constraints aren't met.
type UnlinkSystemsFromTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkSystemsFromTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkSystemsFromTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkSystemsFromTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkSystemsFromTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkSystemsFromTenantRequestValidationError) ErrorName() string {
	return "UnlinkSystemsFromTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkSystemsFromTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkSystemsFromTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkSystemsFromTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkSystemsFromTenantRequestValidationError{}

// Validate checks the field values on UnlinkSystemsFromTenantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlinkSystemsFromTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlinkSystemsFromTenantResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnlinkSystemsFromTenantResponseMultiError, or nil if none found.
func (m *UnlinkSystemsFromTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlinkSystemsFromTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UnlinkSystemsFromTenantResponseMultiError(errors)
	}

	return nil
}

// UnlinkSystemsFromTenantResponseMultiError is an error wrapping multiple
// validation errors returned by UnlinkSystemsFromTenantResponse.ValidateAll()
// if the designated constraints aren't met.
type UnlinkSystemsFromTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlinkSystemsFromTenantResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlinkSystemsFromTenantResponseMultiError) AllErrors() []error { return m }

// UnlinkSystemsFromTenantResponseValidationError is the validation error
// returned by UnlinkSystemsFromTenantResponse.Validate if the designated
// constraints aren't met.
type UnlinkSystemsFromTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkSystemsFromTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkSystemsFromTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkSystemsFromTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkSystemsFromTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkSystemsFromTenantResponseValidationError) ErrorName() string {
	return "UnlinkSystemsFromTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkSystemsFromTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkSystemsFromTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkSystemsFromTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkSystemsFromTenantResponseValidationError{}

// Validate checks the field values on LinkSystemsToTenantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkSystemsToTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkSystemsToTenantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkSystemsToTenantRequestMultiError, or nil if none found.
func (m *LinkSystemsToTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkSystemsToTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSystemIdentifiers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LinkSystemsToTenantRequestValidationError{
						field:  fmt.Sprintf("SystemIdentifiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LinkSystemsToTenantRequestValidationError{
						field:  fmt.Sprintf("SystemIdentifiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LinkSystemsToTenantRequestValidationError{
					field:  fmt.Sprintf("SystemIdentifiers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TenantId

	if len(errors) > 0 {
		return LinkSystemsToTenantRequestMultiError(errors)
	}

	return nil
}

// LinkSystemsToTenantRequestMultiError is an error wrapping multiple
// validation errors returned by LinkSystemsToTenantRequest.ValidateAll() if
// the designated constraints aren't met.
type LinkSystemsToTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkSystemsToTenantRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkSystemsToTenantRequestMultiError) AllErrors() []error { return m }

// LinkSystemsToTenantRequestValidationError is the validation error returned
// by LinkSystemsToTenantRequest.Validate if the designated constraints aren't met.
type LinkSystemsToTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkSystemsToTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkSystemsToTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkSystemsToTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkSystemsToTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkSystemsToTenantRequestValidationError) ErrorName() string {
	return "LinkSystemsToTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkSystemsToTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkSystemsToTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkSystemsToTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkSystemsToTenantRequestValidationError{}

// Validate checks the field values on LinkSystemsToTenantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkSystemsToTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkSystemsToTenantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkSystemsToTenantResponseMultiError, or nil if none found.
func (m *LinkSystemsToTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkSystemsToTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return LinkSystemsToTenantResponseMultiError(errors)
	}

	return nil
}

// LinkSystemsToTenantResponseMultiError is an error wrapping multiple
// validation errors returned by LinkSystemsToTenantResponse.ValidateAll() if
// the designated constraints aren't met.
type LinkSystemsToTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkSystemsToTenantResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkSystemsToTenantResponseMultiError) AllErrors() []error { return m }

// LinkSystemsToTenantResponseValidationError is the validation error returned
// by LinkSystemsToTenantResponse.Validate if the designated constraints
// aren't met.
type LinkSystemsToTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkSystemsToTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkSystemsToTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkSystemsToTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkSystemsToTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkSystemsToTenantResponseValidationError) ErrorName() string {
	return "LinkSystemsToTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkSystemsToTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkSystemsToTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkSystemsToTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkSystemsToTenantResponseValidationError{}

// Validate checks the field values on UpdateSystemStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSystemStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSystemStatusRequestMultiError, or nil if none found.
func (m *UpdateSystemStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Region

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateSystemStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateSystemStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSystemStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateSystemStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemStatusRequestMultiError) AllErrors() []error { return m }

// UpdateSystemStatusRequestValidationError is the validation error returned by
// UpdateSystemStatusRequest.Validate if the designated constraints aren't met.
type UpdateSystemStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemStatusRequestValidationError) ErrorName() string {
	return "UpdateSystemStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemStatusRequestValidationError{}

// Validate checks the field values on UpdateSystemStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSystemStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSystemStatusResponseMultiError, or nil if none found.
func (m *UpdateSystemStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateSystemStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateSystemStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSystemStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateSystemStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemStatusResponseMultiError) AllErrors() []error { return m }

// UpdateSystemStatusResponseValidationError is the validation error returned
// by UpdateSystemStatusResponse.Validate if the designated constraints aren't met.
type UpdateSystemStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemStatusResponseValidationError) ErrorName() string {
	return "UpdateSystemStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemStatusResponseValidationError{}

// Validate checks the field values on SystemIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SystemIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemIdentifierMultiError, or nil if none found.
func (m *SystemIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Region

	if len(errors) > 0 {
		return SystemIdentifierMultiError(errors)
	}

	return nil
}

// SystemIdentifierMultiError is an error wrapping multiple validation errors
// returned by SystemIdentifier.ValidateAll() if the designated constraints
// aren't met.
type SystemIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemIdentifierMultiError) AllErrors() []error { return m }

// SystemIdentifierValidationError is the validation error returned by
// SystemIdentifier.Validate if the designated constraints aren't met.
type SystemIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemIdentifierValidationError) ErrorName() string { return "SystemIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e SystemIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemIdentifierValidationError{}

// Validate checks the field values on SetSystemLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSystemLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSystemLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSystemLabelsRequestMultiError, or nil if none found.
func (m *SetSystemLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSystemLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Region

	// no validation rules for Labels

	if len(errors) > 0 {
		return SetSystemLabelsRequestMultiError(errors)
	}

	return nil
}

// SetSystemLabelsRequestMultiError is an error wrapping multiple validation
// errors returned by SetSystemLabelsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetSystemLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSystemLabelsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSystemLabelsRequestMultiError) AllErrors() []error { return m }

// SetSystemLabelsRequestValidationError is the validation error returned by
// SetSystemLabelsRequest.Validate if the designated constraints aren't met.
type SetSystemLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSystemLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSystemLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSystemLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSystemLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSystemLabelsRequestValidationError) ErrorName() string {
	return "SetSystemLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSystemLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSystemLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSystemLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSystemLabelsRequestValidationError{}

// Validate checks the field values on SetSystemLabelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSystemLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSystemLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSystemLabelsResponseMultiError, or nil if none found.
func (m *SetSystemLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSystemLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return SetSystemLabelsResponseMultiError(errors)
	}

	return nil
}

// SetSystemLabelsResponseMultiError is an error wrapping multiple validation
// errors returned by SetSystemLabelsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetSystemLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSystemLabelsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSystemLabelsResponseMultiError) AllErrors() []error { return m }

// SetSystemLabelsResponseValidationError is the validation error returned by
// SetSystemLabelsResponse.Validate if the designated constraints aren't met.
type SetSystemLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSystemLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSystemLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSystemLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSystemLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSystemLabelsResponseValidationError) ErrorName() string {
	return "SetSystemLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSystemLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSystemLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSystemLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSystemLabelsResponseValidationError{}

// Validate checks the field values on RemoveSystemLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveSystemLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveSystemLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveSystemLabelsRequestMultiError, or nil if none found.
func (m *RemoveSystemLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveSystemLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for Region

	if len(errors) > 0 {
		return RemoveSystemLabelsRequestMultiError(errors)
	}

	return nil
}

// RemoveSystemLabelsRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveSystemLabelsRequest.ValidateAll() if the
// designated constraints aren't met.
type RemoveSystemLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveSystemLabelsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveSystemLabelsRequestMultiError) AllErrors() []error { return m }

// RemoveSystemLabelsRequestValidationError is the validation error returned by
// RemoveSystemLabelsRequest.Validate if the designated constraints aren't met.
type RemoveSystemLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSystemLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSystemLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSystemLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSystemLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSystemLabelsRequestValidationError) ErrorName() string {
	return "RemoveSystemLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSystemLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSystemLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSystemLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSystemLabelsRequestValidationError{}

// Validate checks the field values on RemoveSystemLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveSystemLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveSystemLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveSystemLabelsResponseMultiError, or nil if none found.
func (m *RemoveSystemLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveSystemLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveSystemLabelsResponseMultiError(errors)
	}

	return nil
}

// RemoveSystemLabelsResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveSystemLabelsResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveSystemLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveSystemLabelsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveSystemLabelsResponseMultiError) AllErrors() []error { return m }

// RemoveSystemLabelsResponseValidationError is the validation error returned
// by RemoveSystemLabelsResponse.Validate if the designated constraints aren't met.
type RemoveSystemLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSystemLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSystemLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSystemLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSystemLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSystemLabelsResponseValidationError) ErrorName() string {
	return "RemoveSystemLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSystemLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSystemLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSystemLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSystemLabelsResponseValidationError{}
