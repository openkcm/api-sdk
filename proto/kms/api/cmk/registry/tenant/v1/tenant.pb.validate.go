// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kms/api/cmk/registry/tenant/v1/tenant.proto

package tenantv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TenantMultiError, or nil if none found.
func (m *Tenant) ValidateAll() error {
	return m.validate(true)
}

func (m *Tenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Region

	// no validation rules for OwnerId

	// no validation rules for OwnerType

	// no validation rules for Status

	// no validation rules for StatusUpdatedAt

	// no validation rules for Role

	// no validation rules for UpdatedAt

	// no validation rules for CreatedAt

	// no validation rules for Labels

	if len(errors) > 0 {
		return TenantMultiError(errors)
	}

	return nil
}

// TenantMultiError is an error wrapping multiple validation errors returned by
// Tenant.ValidateAll() if the designated constraints aren't met.
type TenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantMultiError) AllErrors() []error { return m }

// TenantValidationError is the validation error returned by Tenant.Validate if
// the designated constraints aren't met.
type TenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantValidationError) ErrorName() string { return "TenantValidationError" }

// Error satisfies the builtin error interface
func (e TenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantValidationError{}

// Validate checks the field values on RegisterTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterTenantRequestMultiError, or nil if none found.
func (m *RegisterTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Region

	// no validation rules for OwnerId

	// no validation rules for OwnerType

	// no validation rules for Role

	// no validation rules for Labels

	if len(errors) > 0 {
		return RegisterTenantRequestMultiError(errors)
	}

	return nil
}

// RegisterTenantRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterTenantRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterTenantRequestMultiError) AllErrors() []error { return m }

// RegisterTenantRequestValidationError is the validation error returned by
// RegisterTenantRequest.Validate if the designated constraints aren't met.
type RegisterTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterTenantRequestValidationError) ErrorName() string {
	return "RegisterTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterTenantRequestValidationError{}

// Validate checks the field values on RegisterTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterTenantResponseMultiError, or nil if none found.
func (m *RegisterTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RegisterTenantResponseMultiError(errors)
	}

	return nil
}

// RegisterTenantResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterTenantResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterTenantResponseMultiError) AllErrors() []error { return m }

// RegisterTenantResponseValidationError is the validation error returned by
// RegisterTenantResponse.Validate if the designated constraints aren't met.
type RegisterTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterTenantResponseValidationError) ErrorName() string {
	return "RegisterTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterTenantResponseValidationError{}

// Validate checks the field values on ListTenantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantsRequestMultiError, or nil if none found.
func (m *ListTenantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Region

	// no validation rules for OwnerId

	// no validation rules for OwnerType

	// no validation rules for Limit

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTenantsRequestMultiError(errors)
	}

	return nil
}

// ListTenantsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTenantsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTenantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantsRequestMultiError) AllErrors() []error { return m }

// ListTenantsRequestValidationError is the validation error returned by
// ListTenantsRequest.Validate if the designated constraints aren't met.
type ListTenantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantsRequestValidationError) ErrorName() string {
	return "ListTenantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantsRequestValidationError{}

// Validate checks the field values on ListTenantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantsResponseMultiError, or nil if none found.
func (m *ListTenantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTenants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTenantsResponseValidationError{
						field:  fmt.Sprintf("Tenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTenantsResponseValidationError{
						field:  fmt.Sprintf("Tenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTenantsResponseValidationError{
					field:  fmt.Sprintf("Tenants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListTenantsResponseMultiError(errors)
	}

	return nil
}

// ListTenantsResponseMultiError is an error wrapping multiple validation
// errors returned by ListTenantsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTenantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantsResponseMultiError) AllErrors() []error { return m }

// ListTenantsResponseValidationError is the validation error returned by
// ListTenantsResponse.Validate if the designated constraints aren't met.
type ListTenantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantsResponseValidationError) ErrorName() string {
	return "ListTenantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantsResponseValidationError{}

// Validate checks the field values on ApplyTenantAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyTenantAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyTenantAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyTenantAuthRequestMultiError, or nil if none found.
func (m *ApplyTenantAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyTenantAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AuthInfo

	if len(errors) > 0 {
		return ApplyTenantAuthRequestMultiError(errors)
	}

	return nil
}

// ApplyTenantAuthRequestMultiError is an error wrapping multiple validation
// errors returned by ApplyTenantAuthRequest.ValidateAll() if the designated
// constraints aren't met.
type ApplyTenantAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyTenantAuthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyTenantAuthRequestMultiError) AllErrors() []error { return m }

// ApplyTenantAuthRequestValidationError is the validation error returned by
// ApplyTenantAuthRequest.Validate if the designated constraints aren't met.
type ApplyTenantAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyTenantAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyTenantAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyTenantAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyTenantAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyTenantAuthRequestValidationError) ErrorName() string {
	return "ApplyTenantAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyTenantAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyTenantAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyTenantAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyTenantAuthRequestValidationError{}

// Validate checks the field values on ApplyTenantAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyTenantAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyTenantAuthResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyTenantAuthResponseMultiError, or nil if none found.
func (m *ApplyTenantAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyTenantAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return ApplyTenantAuthResponseMultiError(errors)
	}

	return nil
}

// ApplyTenantAuthResponseMultiError is an error wrapping multiple validation
// errors returned by ApplyTenantAuthResponse.ValidateAll() if the designated
// constraints aren't met.
type ApplyTenantAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyTenantAuthResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyTenantAuthResponseMultiError) AllErrors() []error { return m }

// ApplyTenantAuthResponseValidationError is the validation error returned by
// ApplyTenantAuthResponse.Validate if the designated constraints aren't met.
type ApplyTenantAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyTenantAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyTenantAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyTenantAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyTenantAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyTenantAuthResponseValidationError) ErrorName() string {
	return "ApplyTenantAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyTenantAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyTenantAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyTenantAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyTenantAuthResponseValidationError{}

// Validate checks the field values on BlockTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockTenantRequestMultiError, or nil if none found.
func (m *BlockTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return BlockTenantRequestMultiError(errors)
	}

	return nil
}

// BlockTenantRequestMultiError is an error wrapping multiple validation errors
// returned by BlockTenantRequest.ValidateAll() if the designated constraints
// aren't met.
type BlockTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockTenantRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockTenantRequestMultiError) AllErrors() []error { return m }

// BlockTenantRequestValidationError is the validation error returned by
// BlockTenantRequest.Validate if the designated constraints aren't met.
type BlockTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockTenantRequestValidationError) ErrorName() string {
	return "BlockTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockTenantRequestValidationError{}

// Validate checks the field values on BlockTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockTenantResponseMultiError, or nil if none found.
func (m *BlockTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return BlockTenantResponseMultiError(errors)
	}

	return nil
}

// BlockTenantResponseMultiError is an error wrapping multiple validation
// errors returned by BlockTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type BlockTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockTenantResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockTenantResponseMultiError) AllErrors() []error { return m }

// BlockTenantResponseValidationError is the validation error returned by
// BlockTenantResponse.Validate if the designated constraints aren't met.
type BlockTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockTenantResponseValidationError) ErrorName() string {
	return "BlockTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlockTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockTenantResponseValidationError{}

// Validate checks the field values on UnblockTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnblockTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnblockTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnblockTenantRequestMultiError, or nil if none found.
func (m *UnblockTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnblockTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UnblockTenantRequestMultiError(errors)
	}

	return nil
}

// UnblockTenantRequestMultiError is an error wrapping multiple validation
// errors returned by UnblockTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type UnblockTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnblockTenantRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnblockTenantRequestMultiError) AllErrors() []error { return m }

// UnblockTenantRequestValidationError is the validation error returned by
// UnblockTenantRequest.Validate if the designated constraints aren't met.
type UnblockTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnblockTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnblockTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnblockTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnblockTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnblockTenantRequestValidationError) ErrorName() string {
	return "UnblockTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnblockTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnblockTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnblockTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnblockTenantRequestValidationError{}

// Validate checks the field values on UnblockTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnblockTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnblockTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnblockTenantResponseMultiError, or nil if none found.
func (m *UnblockTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnblockTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UnblockTenantResponseMultiError(errors)
	}

	return nil
}

// UnblockTenantResponseMultiError is an error wrapping multiple validation
// errors returned by UnblockTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type UnblockTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnblockTenantResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnblockTenantResponseMultiError) AllErrors() []error { return m }

// UnblockTenantResponseValidationError is the validation error returned by
// UnblockTenantResponse.Validate if the designated constraints aren't met.
type UnblockTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnblockTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnblockTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnblockTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnblockTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnblockTenantResponseValidationError) ErrorName() string {
	return "UnblockTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnblockTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnblockTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnblockTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnblockTenantResponseValidationError{}

// Validate checks the field values on TerminateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TerminateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerminateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TerminateTenantRequestMultiError, or nil if none found.
func (m *TerminateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TerminateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return TerminateTenantRequestMultiError(errors)
	}

	return nil
}

// TerminateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by TerminateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type TerminateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminateTenantRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminateTenantRequestMultiError) AllErrors() []error { return m }

// TerminateTenantRequestValidationError is the validation error returned by
// TerminateTenantRequest.Validate if the designated constraints aren't met.
type TerminateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminateTenantRequestValidationError) ErrorName() string {
	return "TerminateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TerminateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminateTenantRequestValidationError{}

// Validate checks the field values on TerminateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TerminateTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerminateTenantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TerminateTenantResponseMultiError, or nil if none found.
func (m *TerminateTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TerminateTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return TerminateTenantResponseMultiError(errors)
	}

	return nil
}

// TerminateTenantResponseMultiError is an error wrapping multiple validation
// errors returned by TerminateTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type TerminateTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminateTenantResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminateTenantResponseMultiError) AllErrors() []error { return m }

// TerminateTenantResponseValidationError is the validation error returned by
// TerminateTenantResponse.Validate if the designated constraints aren't met.
type TerminateTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminateTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminateTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminateTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminateTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminateTenantResponseValidationError) ErrorName() string {
	return "TerminateTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TerminateTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminateTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminateTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminateTenantResponseValidationError{}

// Validate checks the field values on SetTenantLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTenantLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTenantLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTenantLabelsRequestMultiError, or nil if none found.
func (m *SetTenantLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTenantLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Labels

	if len(errors) > 0 {
		return SetTenantLabelsRequestMultiError(errors)
	}

	return nil
}

// SetTenantLabelsRequestMultiError is an error wrapping multiple validation
// errors returned by SetTenantLabelsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetTenantLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTenantLabelsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTenantLabelsRequestMultiError) AllErrors() []error { return m }

// SetTenantLabelsRequestValidationError is the validation error returned by
// SetTenantLabelsRequest.Validate if the designated constraints aren't met.
type SetTenantLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTenantLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTenantLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTenantLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTenantLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTenantLabelsRequestValidationError) ErrorName() string {
	return "SetTenantLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetTenantLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTenantLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTenantLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTenantLabelsRequestValidationError{}

// Validate checks the field values on SetTenantLabelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTenantLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTenantLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTenantLabelsResponseMultiError, or nil if none found.
func (m *SetTenantLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTenantLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return SetTenantLabelsResponseMultiError(errors)
	}

	return nil
}

// SetTenantLabelsResponseMultiError is an error wrapping multiple validation
// errors returned by SetTenantLabelsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetTenantLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTenantLabelsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTenantLabelsResponseMultiError) AllErrors() []error { return m }

// SetTenantLabelsResponseValidationError is the validation error returned by
// SetTenantLabelsResponse.Validate if the designated constraints aren't met.
type SetTenantLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTenantLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTenantLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTenantLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTenantLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTenantLabelsResponseValidationError) ErrorName() string {
	return "SetTenantLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetTenantLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTenantLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTenantLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTenantLabelsResponseValidationError{}

// Validate checks the field values on RemoveTenantLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTenantLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTenantLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveTenantLabelsRequestMultiError, or nil if none found.
func (m *RemoveTenantLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTenantLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveTenantLabelsRequestMultiError(errors)
	}

	return nil
}

// RemoveTenantLabelsRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveTenantLabelsRequest.ValidateAll() if the
// designated constraints aren't met.
type RemoveTenantLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTenantLabelsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTenantLabelsRequestMultiError) AllErrors() []error { return m }

// RemoveTenantLabelsRequestValidationError is the validation error returned by
// RemoveTenantLabelsRequest.Validate if the designated constraints aren't met.
type RemoveTenantLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTenantLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTenantLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTenantLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTenantLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTenantLabelsRequestValidationError) ErrorName() string {
	return "RemoveTenantLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTenantLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTenantLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTenantLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTenantLabelsRequestValidationError{}

// Validate checks the field values on RemoveTenantLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTenantLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTenantLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveTenantLabelsResponseMultiError, or nil if none found.
func (m *RemoveTenantLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTenantLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveTenantLabelsResponseMultiError(errors)
	}

	return nil
}

// RemoveTenantLabelsResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveTenantLabelsResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveTenantLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTenantLabelsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTenantLabelsResponseMultiError) AllErrors() []error { return m }

// RemoveTenantLabelsResponseValidationError is the validation error returned
// by RemoveTenantLabelsResponse.Validate if the designated constraints aren't met.
type RemoveTenantLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTenantLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTenantLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTenantLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTenantLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTenantLabelsResponseValidationError) ErrorName() string {
	return "RemoveTenantLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTenantLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTenantLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTenantLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTenantLabelsResponseValidationError{}

// Validate checks the field values on GetTenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantRequestMultiError, or nil if none found.
func (m *GetTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTenantRequestMultiError(errors)
	}

	return nil
}

// GetTenantRequestMultiError is an error wrapping multiple validation errors
// returned by GetTenantRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantRequestMultiError) AllErrors() []error { return m }

// GetTenantRequestValidationError is the validation error returned by
// GetTenantRequest.Validate if the designated constraints aren't met.
type GetTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantRequestValidationError) ErrorName() string { return "GetTenantRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantRequestValidationError{}

// Validate checks the field values on GetTenantResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantResponseMultiError, or nil if none found.
func (m *GetTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTenantResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTenantResponseMultiError(errors)
	}

	return nil
}

// GetTenantResponseMultiError is an error wrapping multiple validation errors
// returned by GetTenantResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantResponseMultiError) AllErrors() []error { return m }

// GetTenantResponseValidationError is the validation error returned by
// GetTenantResponse.Validate if the designated constraints aren't met.
type GetTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantResponseValidationError) ErrorName() string {
	return "GetTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantResponseValidationError{}
