// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: kms/api/cmk/registry/tenant/v1/tenant.proto

package tenantv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_RegisterTenant_FullMethodName      = "/kms.api.cmk.registry.tenant.v1.Service/RegisterTenant"
	Service_ListTenants_FullMethodName         = "/kms.api.cmk.registry.tenant.v1.Service/ListTenants"
	Service_GetTenant_FullMethodName           = "/kms.api.cmk.registry.tenant.v1.Service/GetTenant"
	Service_BlockTenant_FullMethodName         = "/kms.api.cmk.registry.tenant.v1.Service/BlockTenant"
	Service_UnblockTenant_FullMethodName       = "/kms.api.cmk.registry.tenant.v1.Service/UnblockTenant"
	Service_TerminateTenant_FullMethodName     = "/kms.api.cmk.registry.tenant.v1.Service/TerminateTenant"
	Service_SetTenantLabels_FullMethodName     = "/kms.api.cmk.registry.tenant.v1.Service/SetTenantLabels"
	Service_RemoveTenantLabels_FullMethodName  = "/kms.api.cmk.registry.tenant.v1.Service/RemoveTenantLabels"
	Service_SetTenantUserGroups_FullMethodName = "/kms.api.cmk.registry.tenant.v1.Service/SetTenantUserGroups"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	RegisterTenant(ctx context.Context, in *RegisterTenantRequest, opts ...grpc.CallOption) (*RegisterTenantResponse, error)
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error)
	BlockTenant(ctx context.Context, in *BlockTenantRequest, opts ...grpc.CallOption) (*BlockTenantResponse, error)
	UnblockTenant(ctx context.Context, in *UnblockTenantRequest, opts ...grpc.CallOption) (*UnblockTenantResponse, error)
	TerminateTenant(ctx context.Context, in *TerminateTenantRequest, opts ...grpc.CallOption) (*TerminateTenantResponse, error)
	SetTenantLabels(ctx context.Context, in *SetTenantLabelsRequest, opts ...grpc.CallOption) (*SetTenantLabelsResponse, error)
	RemoveTenantLabels(ctx context.Context, in *RemoveTenantLabelsRequest, opts ...grpc.CallOption) (*RemoveTenantLabelsResponse, error)
	SetTenantUserGroups(ctx context.Context, in *SetTenantUserGroupsRequest, opts ...grpc.CallOption) (*SetTenantUserGroupsResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) RegisterTenant(ctx context.Context, in *RegisterTenantRequest, opts ...grpc.CallOption) (*RegisterTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTenantResponse)
	err := c.cc.Invoke(ctx, Service_RegisterTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, Service_ListTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTenantResponse)
	err := c.cc.Invoke(ctx, Service_GetTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BlockTenant(ctx context.Context, in *BlockTenantRequest, opts ...grpc.CallOption) (*BlockTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockTenantResponse)
	err := c.cc.Invoke(ctx, Service_BlockTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UnblockTenant(ctx context.Context, in *UnblockTenantRequest, opts ...grpc.CallOption) (*UnblockTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnblockTenantResponse)
	err := c.cc.Invoke(ctx, Service_UnblockTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TerminateTenant(ctx context.Context, in *TerminateTenantRequest, opts ...grpc.CallOption) (*TerminateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateTenantResponse)
	err := c.cc.Invoke(ctx, Service_TerminateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SetTenantLabels(ctx context.Context, in *SetTenantLabelsRequest, opts ...grpc.CallOption) (*SetTenantLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTenantLabelsResponse)
	err := c.cc.Invoke(ctx, Service_SetTenantLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RemoveTenantLabels(ctx context.Context, in *RemoveTenantLabelsRequest, opts ...grpc.CallOption) (*RemoveTenantLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTenantLabelsResponse)
	err := c.cc.Invoke(ctx, Service_RemoveTenantLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SetTenantUserGroups(ctx context.Context, in *SetTenantUserGroupsRequest, opts ...grpc.CallOption) (*SetTenantUserGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTenantUserGroupsResponse)
	err := c.cc.Invoke(ctx, Service_SetTenantUserGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	RegisterTenant(context.Context, *RegisterTenantRequest) (*RegisterTenantResponse, error)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error)
	BlockTenant(context.Context, *BlockTenantRequest) (*BlockTenantResponse, error)
	UnblockTenant(context.Context, *UnblockTenantRequest) (*UnblockTenantResponse, error)
	TerminateTenant(context.Context, *TerminateTenantRequest) (*TerminateTenantResponse, error)
	SetTenantLabels(context.Context, *SetTenantLabelsRequest) (*SetTenantLabelsResponse, error)
	RemoveTenantLabels(context.Context, *RemoveTenantLabelsRequest) (*RemoveTenantLabelsResponse, error)
	SetTenantUserGroups(context.Context, *SetTenantUserGroupsRequest) (*SetTenantUserGroupsResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) RegisterTenant(context.Context, *RegisterTenantRequest) (*RegisterTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTenant not implemented")
}
func (UnimplementedServiceServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedServiceServer) GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedServiceServer) BlockTenant(context.Context, *BlockTenantRequest) (*BlockTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockTenant not implemented")
}
func (UnimplementedServiceServer) UnblockTenant(context.Context, *UnblockTenantRequest) (*UnblockTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockTenant not implemented")
}
func (UnimplementedServiceServer) TerminateTenant(context.Context, *TerminateTenantRequest) (*TerminateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateTenant not implemented")
}
func (UnimplementedServiceServer) SetTenantLabels(context.Context, *SetTenantLabelsRequest) (*SetTenantLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTenantLabels not implemented")
}
func (UnimplementedServiceServer) RemoveTenantLabels(context.Context, *RemoveTenantLabelsRequest) (*RemoveTenantLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTenantLabels not implemented")
}
func (UnimplementedServiceServer) SetTenantUserGroups(context.Context, *SetTenantUserGroupsRequest) (*SetTenantUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTenantUserGroups not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_RegisterTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RegisterTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RegisterTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RegisterTenant(ctx, req.(*RegisterTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_BlockTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).BlockTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_BlockTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).BlockTenant(ctx, req.(*BlockTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UnblockTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UnblockTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UnblockTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UnblockTenant(ctx, req.(*UnblockTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TerminateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TerminateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_TerminateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TerminateTenant(ctx, req.(*TerminateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SetTenantLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTenantLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SetTenantLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_SetTenantLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SetTenantLabels(ctx, req.(*SetTenantLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RemoveTenantLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTenantLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RemoveTenantLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RemoveTenantLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RemoveTenantLabels(ctx, req.(*RemoveTenantLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SetTenantUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTenantUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SetTenantUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_SetTenantUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SetTenantUserGroups(ctx, req.(*SetTenantUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kms.api.cmk.registry.tenant.v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTenant",
			Handler:    _Service_RegisterTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _Service_ListTenants_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _Service_GetTenant_Handler,
		},
		{
			MethodName: "BlockTenant",
			Handler:    _Service_BlockTenant_Handler,
		},
		{
			MethodName: "UnblockTenant",
			Handler:    _Service_UnblockTenant_Handler,
		},
		{
			MethodName: "TerminateTenant",
			Handler:    _Service_TerminateTenant_Handler,
		},
		{
			MethodName: "SetTenantLabels",
			Handler:    _Service_SetTenantLabels_Handler,
		},
		{
			MethodName: "RemoveTenantLabels",
			Handler:    _Service_RemoveTenantLabels_Handler,
		},
		{
			MethodName: "SetTenantUserGroups",
			Handler:    _Service_SetTenantUserGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kms/api/cmk/registry/tenant/v1/tenant.proto",
}
